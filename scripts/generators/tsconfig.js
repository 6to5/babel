import fs from "fs";
const archivedSyntaxPkgs = JSON.parse(
  fs.readFileSync(new URL("./archived-syntax-pkgs.json", import.meta.url))
);

const root = new URL("../../", import.meta.url);

function getTsPkgs(subRoot) {
  return fs
    .readdirSync(new URL(subRoot, root))
    .filter(name => name.startsWith("babel-"))
    .map(name => {
      const relative = `./${subRoot}/${name}`;
      return {
        name: name.replace(/^babel-/, "@babel/"),
        relative,
      };
    })
    .filter(
      ({ name, relative }) =>
        // babel-register is special-cased because its entry point is a js file
        name === "@babel/register" ||
        fs.existsSync(new URL(relative + "/src/index.ts", root))
    );
}

const tsPkgs = [
  ...getTsPkgs("packages"),
  ...getTsPkgs("eslint"),
  ...getTsPkgs("codemods"),
];

fs.writeFileSync(
  new URL("tsconfig.json", root),
  "/* This file is automatically generated by scripts/generators/tsconfig.js */\n" +
    JSON.stringify(
      {
        extends: "./tsconfig.base.json",
        include: tsPkgs.map(({ relative }) => `${relative}/src/**/*.ts`),
        compilerOptions: {
          paths: Object.fromEntries([
            ...tsPkgs.map(({ name, relative }) => [name, [`${relative}/src`]]),
            ...archivedSyntaxPkgs.map(name => [
              name,
              ["./lib/archived-libs.d.ts"],
            ]),
          ]),
        },
      },
      null,
      2
    )
);
